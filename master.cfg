# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *
c = BuildmasterConfig = {}

####### WORKERS

c['workers'] = [worker.Worker("py3-worker", os.environ['PY3_WORKER_PASSWORD'])]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []

c['schedulers'].append(schedulers.AnyBranchScheduler(
    name="all",
    treeStableTimer=None,
    builderNames=["runtests"]))

c['schedulers'].append(schedulers.ForceScheduler(
    name="force",
    builderNames=["runtests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

c['builders'] = []
hp_factory = util.BuildFactory()

hp_factory.addStep(
    steps.Mercurial(
        repourl='https://honeyprice-repo.ua2web.com/honeyprice/', mode='incremental',
        method='fresh', branchType='inrepo'))

hp_factory.addStep(steps.ShellCommand(command=["make", "decrypt_vaultfiles"]))
hp_factory.addStep(steps.ShellCommand(command=["make", "setup"]))
hp_factory.addStep(steps.ShellCommand(command=["make", "build"]))
hp_factory.addStep(steps.ShellCommand(command=["make", "restart"], usePTY=True))
hp_factory.addStep(steps.ShellCommand(command=["make", "tests"], usePTY=True))

c['builders'].append(
    util.BuilderConfig(name="runtests",
      workernames=["py3-worker"],
      factory=hp_factory))


####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

from buildbot.plugins import reporters
mn = reporters.MailNotifier(
    fromaddr="buildbot@honeyprice.net",
    sendToInterestedUsers=False,
    # extraRecipients=["hp-devs@honeyprice.net"],
    mode="all",
    # extraRecipients=["alex@honeyprice.net"],
    extraRecipients=["alex.v.koval@gmail.com"],
    relayhost="mail.ua2web.com", smtpPort=25,
    useTls=True,
    smtpUser="smtp@honeyprice.net",
    smtpPassword=os.environ.get("SMTP_PASSWORD", "")
)
c['services'].append(mn)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "UA2WEB Buildbot"
c['titleURL'] = "https://buildbot.ua2web.com"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "https://buildbot.ua2web.com/")

# minimalistic config to activate new web UI
c['www'] = dict(
    port=8010,
    plugins=dict(waterfall_view={}, console_view={}, grid_view={}),
    change_hook_dialects={
        'base': True,
    },
)

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
